C51 COMPILER V9.60.7.0   MAIN                                                              03/27/2024 13:59:50 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\outputs\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND OBJECT(.\output
                    -s\main.obj)

line level    source

   1          
   2          //#include "iic.h"
   3          #include "mpu6050.h"
   4          
   5          sbit LED    = P3^5;
   6          sbit SWITCH = P3^6;
   7          sbit KEY1   = P3^3;
   8          sbit KEY2   = P3^2;
   9          
  10          u8 _K1 = 0,_K2 = 0;
  11          u8 KEY1_DOWN=0,KEY2_DOWN=0;
  12          
  13          //运放电压与温度对应表  0  50  100  150  200  250  300  350  400  450
  14          //  adc
  15          //  |
  16          //      |____temp
  17          //
  18          #define TEMPMAPNUM 10
  19          static struct temperature_map{
  20                  int temp;
  21                  int adc;
  22                  float k;
  23                  float b;
  24          }temp_map[TEMPMAPNUM] = {{0,0},
  25                                                          {50,100},
  26                                                          {100,200},
  27                                                          {150,300},
  28                                                          {200,400},
  29                                                          {250,500},
  30                                                          {300,600},
  31                                                          {350,750},
  32                                                          {400,800},
  33                                                          {450,850}};
  34                  
  35          #define ADCARRAYNUM 5
  36          
  37          void gpio_init(void);
  38          void ADC_init(void);
  39          u16 ADC_get_val(u8 channel);
  40          u16 temp2adcval(u16 temperature);
  41          u16 adc2tempval(u16 adcval);
  42          int get_pwmval_with_pid(u16 adcvalt12, u16 adcvalwant, u16 pwmmax);
  43          void Timer0_Init(void);
  44          
  45          int main()
  46          {
  47   1              u16 PWMVAL = 0;
  48   1              float powerval=0;
  49   1              u16 pwmtime = 0;
  50   1              u32 t12adc_val[ADCARRAYNUM] = {0}, t12adc_max, t12adc_min, t12adc_all, t12adc_average, t12adc_i=0;   //ad
             -c均值滤波  adc电压单位mV
  51   1              u16 temp_want = 350,adc_want;
  52   1              s16 mpu_data=0,mpu_diff=0,mpu_time=0,mpu_temp;
  53   1              u8 i;
C51 COMPILER V9.60.7.0   MAIN                                                              03/27/2024 13:59:50 PAGE 2   

  54   1              
  55   1      
  56   1              for(i=0;i<TEMPMAPNUM-1;i++)
  57   1              {
  58   2                      temp_map[i].k = (temp_map[i+1].adc-temp_map[i].adc)/50.0f;
  59   2                      temp_map[i].b = temp_map[i].adc-temp_map[i].k*temp_map[i].temp;
  60   2              }
  61   1              
  62   1              gpio_init();
  63   1              OLED_Init();
  64   1              ADC_init();
  65   1              Timer0_Init();
  66   1              InitMPU6050();
  67   1              
  68   1              EA = 1;
  69   1              SWITCH = 0;
  70   1      
  71   1              OLED_ShowString(72,0,"Set:",8);
  72   1              OLED_ShowString(72,1,"Pow:",8);
  73   1              OLED_ShowString(72,2,"Tmp:",8);
  74   1              OLED_ShowNum(102,0,temp_want,3,8);
  75   1              
  76   1              
  77   1              OLED_ShowNum(102,2,mpu_temp,3,8);
  78   1              
  79   1              while(1)
  80   1              {
  81   2                      //加热
  82   2                      if(pwmtime<PWMVAL)
  83   2                      {
  84   3                              SWITCH = 1;
  85   3                              LED = 0;
  86   3                      }
  87   2                      //断开
  88   2                      else
  89   2                      {
  90   3                              SWITCH = 0;
  91   3                              LED = 1;
  92   3                      }
  93   2                      delay_us(25);
  94   2                      pwmtime++;
  95   2                      if(pwmtime==2501)  //25*2500=62500us = 62.5ms = 16Hz
  96   2                      {
  97   3                              pwmtime = 0;
  98   3                              mpu_data = GetData(MPU_GYRO_YOUTH_REG);
  99   3                              
 100   3                              //非全速加热时获取当前电压与mpu6050温度数据
 101   3                              if((2500-PWMVAL)>800)
 102   3                              {
 103   4                                      //计算当前电源电压并显示
 104   4                                      powerval = ADC_get_val(1);
 105   4                                      powerval = (powerval*3300)/4096;
 106   4                                      powerval = powerval/10000*100;
 107   4                                      OLED_ShowNum(102,1,powerval*10,3,8);
 108   4                                      mpu_temp = MPU_Get_Temperature();
 109   4                                      OLED_ShowNum(102,2,mpu_temp,3,8);
 110   4                              }
 111   3      
 112   3                              //根据设定的温度获取T12热电偶电压值（adc值）
 113   3                              adc_want = temp2adcval(temp_want);
 114   3      
 115   3                              //adc滤波数组去掉最大最小值，求均值
C51 COMPILER V9.60.7.0   MAIN                                                              03/27/2024 13:59:50 PAGE 3   

 116   3                              t12adc_max=t12adc_val[0];
 117   3                              t12adc_min=t12adc_val[0];
 118   3                              t12adc_all = 0;
 119   3                              for(i=0;i<ADCARRAYNUM;i++)
 120   3                              {
 121   4                                      if(t12adc_val[i]<t12adc_min)
 122   4                                              t12adc_min = t12adc_val[i];
 123   4                                      if(t12adc_val[i]>t12adc_max)
 124   4                                              t12adc_max = t12adc_val[i];
 125   4                                      t12adc_all += t12adc_val[i];
 126   4                              }
 127   3                              t12adc_average = (t12adc_all-t12adc_max-t12adc_min)/(ADCARRAYNUM-2);
 128   3                              PWMVAL = get_pwmval_with_pid(t12adc_average,adc_want,2500);
 129   3                              OLED_ShowNum(32,0,adc2tempval(t12adc_average),3,16);
 130   3      
 131   3                              //计算运算放大器输出电压，填充数组
 132   3                              t12adc_val[t12adc_i] = ADC_get_val(0);
 133   3                              t12adc_val[t12adc_i] = (t12adc_val[t12adc_i]*3300)/4096;
 134   3                              t12adc_i++;
 135   3                              if(t12adc_i==ADCARRAYNUM)
 136   3                                      t12adc_i = 0;
 137   3                              
 138   3                              //按键检测
 139   3                              if(KEY1_DOWN&&KEY2_DOWN)  //同时按下
 140   3                              {
 141   4                                      KEY1_DOWN = 0;
 142   4                                      KEY2_DOWN = 0;
 143   4                                      
 144   4                              }
 145   3                              if(KEY1_DOWN)   //KEY1按下
 146   3                              {
 147   4                                      OLED_ShowNum(102,0,temp_want+=KEY1_DOWN,3,8);
 148   4                                      KEY1_DOWN = 0;
 149   4                              }
 150   3                              if(KEY2_DOWN)  //KEY2按下
 151   3                              {
 152   4                                      OLED_ShowNum(102,0,temp_want-=KEY2_DOWN,3,8);
 153   4                                      KEY2_DOWN = 0;
 154   4                              }
 155   3                      }
 156   2              }
 157   1      }
 158          
 159          
 160          void gpio_init(void)
 161          {
 162   1              P_SW2 |= 0x80;     //使能访问 XFR
 163   1              
 164   1              P3M0 |= (3<<5);    //设置 P3.5  P3.6为推挽模式   LED & SWITCH
 165   1              P3M1 &= ~(3<<5);
 166   1              
 167   1              P1M0 |= (3<<4);    //设置 P1.4  P1.5为开漏模式   IIC 带上拉电阻
 168   1              P1M1 |= (3<<4);
 169   1              
 170   1              P1M0 &= ~(3<<0);   //设置 P1.0  P1.1为高阻输入   ADC
 171   1              P1M1 |= (3<<0);
 172   1              
 173   1              P3M0 &= ~(3<<2);    //设置 P3.2  P3.3为准双向模式   KEY
 174   1              P3M1 &= ~(3<<2);
 175   1              
 176   1              KEY1=1;
 177   1              KEY2=1;
C51 COMPILER V9.60.7.0   MAIN                                                              03/27/2024 13:59:50 PAGE 4   

 178   1              SCL=1;
 179   1              SDA=1;
 180   1      }
 181          
 182          void ADC_init(void)
 183          {
 184   1              ADCTIM = 0x3f;//设置 ADC 内部时序
 185   1              ADCCFG = 0x0f;//设置 ADC 时钟为系统时钟/2/16
 186   1              ADC_CONTR = 0x80;//使能 ADC 模块
 187   1      }
 188          
 189          
 190          u16 ADC_get_val(u8 channel)
 191          {
 192   1              ADC_CONTR |= 0x40;        //启动 AD 转换
 193   1              
 194   1              ADC_CONTR &= ~(0xf);
 195   1              ADC_CONTR |= channel;
 196   1              
 197   1              _nop_();
 198   1              _nop_();
 199   1              while (!(ADC_CONTR & 0x20));//查询 ADC 完成标志
 200   1              ADC_CONTR &= ~0x20;         //清完成标志
 201   1              P2 = ADC_RES;               //读取 ADC 结果
 202   1              return (ADC_RES<<4)|(ADC_RESL>>4);
 203   1      }
 204          
 205          
 206          u16 temp2adcval(u16 temperature)
 207          {
 208   1              u8 i=0;
 209   1              
 210   1              for(i=0;i<TEMPMAPNUM-1;i++)
 211   1              {
 212   2                      if(temperature>=temp_map[i].temp&&temperature<temp_map[i+1].temp)
 213   2                      {
 214   3                              return temp_map[i].k*temperature+temp_map[i].b;
 215   3                      }
 216   2              }
 217   1      }
 218          
 219          u16 adc2tempval(u16 adcval)
 220          {
 221   1              u8 i=0;
 222   1              
 223   1              for(i=0;i<TEMPMAPNUM-1;i++)
 224   1              {
 225   2                      if(adcval>=temp_map[i].adc&&adcval<temp_map[i+1].adc)
 226   2                      {
 227   3                              return (adcval-temp_map[i].b)/temp_map[i].k;
 228   3                      }
 229   2              }
 230   1      }
 231          
 232          
 233          #define PVAL  12.0F
 234          #define IVAL  0.92F
 235          #define DVAL  1.20F
 236          #define INTEGRAL 1500
 237          int get_pwmval_with_pid(u16 adcvalt12, u16 adcvalwant, u16 pwmmax)
 238          {
 239   1              static s16  lasterror=0, integralval=0;
C51 COMPILER V9.60.7.0   MAIN                                                              03/27/2024 13:59:50 PAGE 5   

 240   1              s16 error,derror, pwmval=0;
 241   1              error = adcvalwant - adcvalt12;
 242   1              integralval += error;
 243   1              if(integralval>INTEGRAL)
 244   1                      integralval = INTEGRAL;
 245   1              if(integralval<-INTEGRAL)
 246   1                      integralval = -INTEGRAL;
 247   1              
 248   1              derror = error - lasterror;
 249   1              pwmval = PVAL*error + IVAL*integralval + DVAL*derror;
 250   1              lasterror = error;
 251   1              
 252   1              if(pwmval > pwmmax)
 253   1                      pwmval = pwmmax;
 254   1              return pwmval;
 255   1      }
 256          
 257          void Timer0_Isr(void) interrupt 1
 258          {
 259   1              if(KEY1==0){
 260   2                      _K1+=1;
 261   2              }else{
 262   2                      _K1=0;
 263   2              }
 264   1              if(KEY2==0){
 265   2                      _K2+=1;
 266   2              }else{
 267   2                      _K2=0;
 268   2              }
 269   1              if(_K1>80)
 270   1              {
 271   2                      _K1=0;
 272   2                      KEY1_DOWN+=1;
 273   2              }
 274   1              if(_K2>80)
 275   1              {
 276   2                      _K2=0;
 277   2                      KEY2_DOWN+=1;
 278   2              }
 279   1      }
 280          
 281          void Timer0_Init(void)          //1000微秒@40.000MHz
 282          {
 283   1              AUXR |= 0x80;                   //定时器时钟1T模式
 284   1              TMOD &= 0xF0;                   //设置定时器模式
 285   1              TL0 = 0xC0;                             //设置定时初始值
 286   1              TH0 = 0x63;                             //设置定时初始值
 287   1              TF0 = 0;                                //清除TF0标志
 288   1              TR0 = 1;                                //定时器0开始计时
 289   1              ET0 = 1;                                //使能定时器0中断
 290   1      }
 291          
 292          
*** WARNING C291 IN LINE 217 OF main.c: not every exit path returns a value
*** WARNING C291 IN LINE 230 OF main.c: not every exit path returns a value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2338    ----
   CONSTANT SIZE    =     35    ----
   XDATA SIZE       =    128      73
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.60.7.0   MAIN                                                              03/27/2024 13:59:50 PAGE 6   

   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
