C51 COMPILER V9.60.7.0   MAIN                                                              03/25/2024 13:49:33 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\outputs\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND OBJECT(.\output
                    -s\main.obj)

line level    source

   1          
   2          //#include "iic.h"
   3          #include "mpu6050.h"
   4          
   5          sbit LED    = P3^5;
   6          sbit SWITCH = P3^6;
   7          sbit KEY1   = P3^3;
   8          sbit KEY2   = P3^2;
   9          
  10          u8 _K1 = 0,_K2 = 0;
  11          u8 KEY1_DOWN=0,KEY2_DOWN=0;
  12          
  13          //运放电压与温度对应表  0  50  100  150  200  250  300  350  400  450
  14          //  adc
  15          //  |
  16          //      |____temp
  17          //
  18          #define TEMPMAPNUM 10
  19          static struct temperature_map{
  20                  int temp;
  21                  int adc;
  22                  float k;
  23                  float b;
  24          }temp_map[TEMPMAPNUM] = {{0,0},
  25                                                          {50,100},
  26                                                          {100,200},
  27                                                          {150,300},
  28                                                          {200,400},
  29                                                          {250,500},
  30                                                          {300,600},
  31                                                          {350,750},
  32                                                          {400,800},
  33                                                          {450,850}};
  34                  
  35          #define ADCARRAYNUM 5
  36          
  37          void gpio_init(void);
  38          void ADC_init(void);
  39          u16 ADC_get_val(u8 channel);
  40          u16 temp2adcval(u16 temperature);
  41          u16 adc2tempval(u16 adcval);
  42          int get_pwmval_with_pid(u16 adcvalt12, u16 adcvalwant, u16 pwmmax);
  43          void Timer0_Init(void);
  44          
  45          int main()
  46          {
  47   1              u16 PWMVAL = 0;
  48   1              float powerval=0;
  49   1              u16 pwmtime = 0;
  50   1              u32 t12adc_val[ADCARRAYNUM] = {0}, t12adc_max, t12adc_min, t12adc_all, t12adc_average, t12adc_i=0;   //ad
             -c均值滤波  adc电压单位mV
  51   1              u16 temp_want = 350,adc_want;
  52   1              s16 mpu_data=0,mpu_diff=0,mpu_time=0,mpu_temp;
  53   1              u8 i;
C51 COMPILER V9.60.7.0   MAIN                                                              03/25/2024 13:49:33 PAGE 2   

  54   1              
  55   1      INITRESET:
  56   1              for(i=0;i<TEMPMAPNUM-1;i++)
  57   1              {
  58   2                      temp_map[i].k = (temp_map[i+1].adc-temp_map[i].adc)/50.0f;
  59   2                      temp_map[i].b = temp_map[i].adc-temp_map[i].k*temp_map[i].temp;
  60   2              }
  61   1              
  62   1              gpio_init();
  63   1              OLED_Init();
  64   1              ADC_init();
  65   1              Timer0_Init();
  66   1              InitMPU6050();
  67   1              
  68   1              EA = 1;
  69   1              SWITCH = 0;
  70   1      
  71   1              OLED_ShowString(72,0,"Set:",8);
  72   1              OLED_ShowString(72,1,"Pow:",8);
  73   1              OLED_ShowString(72,2,"Tmp:",8);
  74   1              OLED_ShowNum(102,0,temp_want,3,8);
  75   1              
  76   1              
  77   1              OLED_ShowNum(102,2,mpu_temp,3,8);
  78   1              
  79   1              while(1)
  80   1              {
  81   2                      if(pwmtime<PWMVAL)
  82   2                      {
  83   3                              SWITCH = 1;
  84   3                              LED = 0;
  85   3                      }
  86   2                      else
  87   2                      {
  88   3                              SWITCH = 0;
  89   3                              LED = 1;
  90   3                      }
  91   2                      delay_us(50);
  92   2                      pwmtime++;
  93   2                      if(pwmtime==2501)  //50*2500=125000us = 125ms周期
  94   2                      {
  95   3                              pwmtime = 0;
  96   3                              mpu_data = GetData(MPU_GYRO_XOUTH_REG);
  97   3                              
  98   3                              //非全速加热时获取当前电压与mpu6050温度数据
  99   3                              if((2500-PWMVAL)>800)
 100   3                              {
 101   4                                      //计算当前电源电压并显示
 102   4                                      powerval = ADC_get_val(1);
 103   4                                      powerval = (powerval*3300)/4096;
 104   4                                      powerval = powerval/10000*100;
 105   4                                      OLED_ShowNum(102,1,powerval*10,3,8);
 106   4                                      mpu_temp = MPU_Get_Temperature();
 107   4                                      OLED_ShowNum(102,2,mpu_temp,3,8);
 108   4                              }
 109   3      
 110   3                              //根据设定的温度获取T12热电偶电压值（adc值）
 111   3                              adc_want = temp2adcval(temp_want);
 112   3      
 113   3                              //adc滤波数组去掉最大最小值，求均值
 114   3                              t12adc_max=t12adc_val[0];
 115   3                              t12adc_min=t12adc_val[0];
C51 COMPILER V9.60.7.0   MAIN                                                              03/25/2024 13:49:33 PAGE 3   

 116   3                              t12adc_all = 0;
 117   3                              for(i=0;i<ADCARRAYNUM;i++)
 118   3                              {
 119   4                                      if(t12adc_val[i]<t12adc_min)
 120   4                                              t12adc_min = t12adc_val[i];
 121   4                                      if(t12adc_val[i]>t12adc_max)
 122   4                                              t12adc_max = t12adc_val[i];
 123   4                                      t12adc_all += t12adc_val[i];
 124   4                              }
 125   3                              t12adc_average = (t12adc_all-t12adc_max-t12adc_min)/(ADCARRAYNUM-2);
 126   3                              PWMVAL = get_pwmval_with_pid(t12adc_average,adc_want,2500);
 127   3                              OLED_ShowNum(32,0,adc2tempval(t12adc_average),3,16);
 128   3      
 129   3                              //计算运算放大器输出电压，填充数组
 130   3                              t12adc_val[t12adc_i] = ADC_get_val(0);
 131   3                              t12adc_val[t12adc_i] = (t12adc_val[t12adc_i]*3300)/4096;
 132   3                              t12adc_i++;
 133   3                              if(t12adc_i==ADCARRAYNUM)
 134   3                                      t12adc_i = 0;
 135   3                              
 136   3                              //按键检测
 137   3                              if(KEY1_DOWN&&KEY2_DOWN)
 138   3                              {
 139   4                                      KEY1_DOWN = 0;
 140   4                                      KEY2_DOWN = 0;
 141   4                                      goto INITRESET;
 142   4                              }
 143   3                              if(KEY1_DOWN)
 144   3                              {
 145   4                                      OLED_ShowNum(102,0,temp_want+=KEY1_DOWN,3,8);
 146   4                                      KEY1_DOWN = 0;
 147   4                              }
 148   3                              if(KEY2_DOWN)
 149   3                              {
 150   4                                      OLED_ShowNum(102,0,temp_want-=KEY2_DOWN,3,8);
 151   4                                      KEY2_DOWN = 0;
 152   4                              }
 153   3                      }
 154   2              }
 155   1      }
 156          
 157          
 158          void gpio_init(void)
 159          {
 160   1              P_SW2 |= 0x80;     //使能访问 XFR
 161   1              
 162   1              P3M0 |= (3<<5);    //设置 P3.5  P3.6为推挽模式   LED  SWITCH
 163   1              P3M1 &= ~(3<<5);
 164   1              
 165   1              P1M0 |= (3<<4);    //设置 P1.4  P1.5为开漏模式   IIC 带上拉电阻
 166   1              P1M1 |= (3<<4);
 167   1              
 168   1              P1M0 &= ~(3<<0);   //设置 P1.0  P1.1为高阻输入   ADC
 169   1              P1M1 |= (3<<0);
 170   1              
 171   1              P3M0 &= ~(3<<2);    //设置 P3.2  P3.3为准双向模式   KEY
 172   1              P3M1 &= ~(3<<2);
 173   1              
 174   1              KEY1=1;
 175   1              KEY2=1;
 176   1              SCL=1;
 177   1              SDA=1;
C51 COMPILER V9.60.7.0   MAIN                                                              03/25/2024 13:49:33 PAGE 4   

 178   1      }
 179          
 180          void ADC_init(void)
 181          {
 182   1              ADCTIM = 0x3f;//设置 ADC 内部时序
 183   1              ADCCFG = 0x0f;//设置 ADC 时钟为系统时钟/2/16
 184   1              ADC_CONTR = 0x80;//使能 ADC 模块
 185   1      }
 186          
 187          
 188          u16 ADC_get_val(u8 channel)
 189          {
 190   1              ADC_CONTR |= 0x40;        //启动 AD 转换
 191   1              
 192   1              ADC_CONTR &= ~(0xf);
 193   1              ADC_CONTR |= channel;
 194   1              
 195   1              _nop_();
 196   1              _nop_();
 197   1              while (!(ADC_CONTR & 0x20));//查询 ADC 完成标志
 198   1              ADC_CONTR &= ~0x20;         //清完成标志
 199   1              P2 = ADC_RES;               //读取 ADC 结果
 200   1              return (ADC_RES<<4)|(ADC_RESL>>4);
 201   1      }
 202          
 203          
 204          u16 temp2adcval(u16 temperature)
 205          {
 206   1              u8 i=0;
 207   1              
 208   1              for(i=0;i<TEMPMAPNUM-1;i++)
 209   1              {
 210   2                      if(temperature>=temp_map[i].temp&&temperature<temp_map[i+1].temp)
 211   2                      {
 212   3                              return temp_map[i].k*temperature+temp_map[i].b;
 213   3                      }
 214   2              }
 215   1      }
 216          
 217          u16 adc2tempval(u16 adcval)
 218          {
 219   1              u8 i=0;
 220   1              
 221   1              for(i=0;i<TEMPMAPNUM-1;i++)
 222   1              {
 223   2                      if(adcval>=temp_map[i].adc&&adcval<temp_map[i+1].adc)
 224   2                      {
 225   3                              return (adcval-temp_map[i].b)/temp_map[i].k;
 226   3                      }
 227   2              }
 228   1      }
 229          
 230          
 231          #define PVAL  20.0F
 232          #define IVAL  0.0F
 233          #define DVAL  0.0F
 234          int get_pwmval_with_pid(u16 adcvalt12, u16 adcvalwant, u16 pwmmax)
 235          {
 236   1              static s16  lastadcval=0, addval=0;
 237   1              
 238   1              float pwm_val = 0;
 239   1              int diff = adcvalwant - adcvalt12;
C51 COMPILER V9.60.7.0   MAIN                                                              03/25/2024 13:49:33 PAGE 5   

 240   1              pwm_val = PVAL*diff;
 241   1              if(pwm_val<0)
 242   1                      pwm_val = -pwm_val;
 243   1              if(pwm_val > pwmmax)
 244   1                      pwm_val = pwmmax;
 245   1              if(adcvalt12>adcvalwant)
 246   1                      return 100;
 247   1              return pwm_val;
 248   1      }
*** WARNING C280 IN LINE 236 OF main.c: 'lastadcval': unreferenced local variable
*** WARNING C280 IN LINE 236 OF main.c: 'addval': unreferenced local variable
 249          
 250          void Timer0_Isr(void) interrupt 1
 251          {
 252   1              if(KEY1==0){
 253   2                      _K1+=1;
 254   2              }else{
 255   2                      _K1=0;
 256   2              }
 257   1              if(KEY2==0){
 258   2                      _K2+=1;
 259   2              }else{
 260   2                      _K2=0;
 261   2              }
 262   1              if(_K1>80)
 263   1              {
 264   2                      _K1=0;
 265   2                      KEY1_DOWN+=1;
 266   2              }
 267   1              if(_K2>80)
 268   1              {
 269   2                      _K2=0;
 270   2                      KEY2_DOWN+=1;
 271   2              }
 272   1      }
 273          
 274          void Timer0_Init(void)          //1000微秒@40.000MHz
 275          {
 276   1              AUXR |= 0x80;                   //定时器时钟1T模式
 277   1              TMOD &= 0xF0;                   //设置定时器模式
 278   1              TL0 = 0xC0;                             //设置定时初始值
 279   1              TH0 = 0x63;                             //设置定时初始值
 280   1              TF0 = 0;                                //清除TF0标志
 281   1              TR0 = 1;                                //定时器0开始计时
 282   1              ET0 = 1;                                //使能定时器0中断
 283   1      }
 284          
 285          
*** WARNING C291 IN LINE 215 OF main.c: not every exit path returns a value
*** WARNING C291 IN LINE 228 OF main.c: not every exit path returns a value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2282    ----
   CONSTANT SIZE    =     35    ----
   XDATA SIZE       =    128      77
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  4 WARNING(S),  0 ERROR(S)
