C51 COMPILER V9.60.7.0   MAIN                                                              04/16/2024 22:55:50 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\outputs\main.obj
COMPILER INVOKED BY: D:\keil5\C51\BIN\C51.EXE main.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND OBJECT(.\outputs\
                    -main.obj)

line level    source

   1          
   2          //#include "iic.h"
   3          #include "mpu6050.h"
   4          
   5          sbit LED    = P3^5;
   6          sbit SWITCH = P3^6;
   7          sbit KEY1   = P3^3;
   8          sbit KEY2   = P3^2;
   9          
  10          u8 _K1 = 0,_K2 = 0;
  11          u8 KEY1_DOWN=0,KEY2_DOWN=0;
  12          
  13          //运放电压与温度对应表  0  50  100  150  200  250  300  350  400  450
  14          //  adc
  15          //  |
  16          //      |____temp
  17          // 当前温度曲线为西安头
  18          #define TEMPMAPNUM 10
  19          static struct temperature_map{
  20                  int temp;
  21                  int adc;
  22                  float k;
  23                  float b;
  24          }temp_map[TEMPMAPNUM] = {{0,0},
  25                                                          {50,90},
  26                                                          {100,254},
  27                                                          {150,350},
  28                                                          {200,488},
  29                                                          {250,620},
  30                                                          {300,786},
  31                                                          {350,922},
  32                                                          {400,1060},
  33                                                          {450,1250}};
  34                  
  35          #define ADCARRAYNUM 5       //t12 adc数组
  36          #define SLEEPTIME   300     //休眠时间（秒）
  37          #define CLOSETIME   600     //关闭时间（秒）
  38          #define MPUGRYLIEMT 20      //mpu6050震动范围（判断静置状态）
  39          #define PWMHZ       10      //当前加热频率
  40          
  41          
  42          void gpio_init(void);
  43          void ADC_init(void);
  44          u16 ADC_get_val(u8 channel);
  45          u16 temp2adcval(u16 temperature);
  46          u16 adc2tempval(u16 adcval);
  47          int get_pwmval_with_pid(u16 adcvalt12, u16 adcvalwant, s16 pwmmax);
  48          void Timer0_Init(void);
  49          s16 abs(s16 num);
  50                                                          
  51                                                          
  52          #if 1
  53          int main()
  54          {
C51 COMPILER V9.60.7.0   MAIN                                                              04/16/2024 22:55:50 PAGE 2   

  55   1              s16 PWMVAL = 0, pwmtime = 0;
  56   1              float powerval=0;
  57   1              u32 t12adc_val[ADCARRAYNUM] = {0}, t12adc_max, t12adc_min, t12adc_all, t12adc_average, t12adc_i=0;   //ad
             -c均值滤波  adc电压单位mV
  58   1              u16 temp_want = 350,temp_set=350,adc_want;
  59   1              s16 mpu_data=0,mpu_data_diff=0,mpu_data_last=0,mpu_time,mpu_temp;
  60   1              u8 i;
  61   1              
  62   1      
  63   1              for(i=0;i<TEMPMAPNUM-1;i++)
  64   1              {
  65   2                      temp_map[i].k = (temp_map[i+1].adc-temp_map[i].adc)/50.0f;
  66   2                      temp_map[i].b = temp_map[i].adc-temp_map[i].k*temp_map[i].temp;
  67   2              }
  68   1              
  69   1              gpio_init();
  70   1              OLED_Init();
  71   1              ADC_init();
  72   1              Timer0_Init();
  73   1              InitMPU6050();
  74   1              
  75   1              EA = 1;
  76   1              SWITCH = 0;
  77   1      
  78   1              OLED_ShowString(72,0,"Set:",8);
  79   1              OLED_ShowString(72,1,"Pow:",8);
  80   1              OLED_ShowString(72,2,"Slp:",8);
  81   1              OLED_ShowNum(102,0,temp_want,3,8);
  82   1      
  83   1      
  84   1              //计算当前电源电压并显示
  85   1              powerval = ADC_get_val(1);
  86   1              powerval = (powerval*3300)/4096;
  87   1              powerval = powerval/1000*11.2;
  88   1              OLED_ShowNum(102,1,powerval*10,3,8);
  89   1              
  90   1              //
  91   1              powerval = ADC_get_val(1);
  92   1              powerval = (powerval*3300)/4096;
  93   1              powerval = powerval/1000*11.2;
  94   1              OLED_ShowNum(102,1,powerval*10,3,8);
  95   1              
  96   1              
  97   1              while(1)
  98   1              {
  99   2                      //加热
 100   2                      if(pwmtime<PWMVAL)
 101   2                      {
 102   3                              SWITCH = 1;
 103   3                              LED = 0;
 104   3                      }
 105   2                      //断开
 106   2                      else
 107   2                      {
 108   3                              SWITCH = 0;
 109   3                              LED = 1;
 110   3                      }
 111   2                      delay_us(40);
 112   2                      pwmtime++;
 113   2                      if(pwmtime==2501)  //40*2500=100000us = 100ms = 10Hz
 114   2                      {
 115   3                              pwmtime = 0;
C51 COMPILER V9.60.7.0   MAIN                                                              04/16/2024 22:55:50 PAGE 3   

 116   3                              //静止时间检测
 117   3                              mpu_data = GetData(MPU_GYRO_YOUTH_REG);
 118   3                              mpu_data_diff = mpu_data - mpu_data_last;
 119   3                              mpu_data_last = mpu_data;
 120   3                              if(abs(mpu_data_diff)<MPUGRYLIEMT)
 121   3                              {
 122   4                                      mpu_time++;
 123   4                              }
 124   3                              else
 125   3                                      mpu_time=0;
 126   3                              
 127   3                              //休眠、关闭、加热状态切换
 128   3                              if(mpu_time/PWMHZ>CLOSETIME)
 129   3                                      temp_want = 0;
 130   3                              else if(mpu_time/PWMHZ>SLEEPTIME)
 131   3                                      temp_want = 200;
 132   3                              else
 133   3                                      temp_want = temp_set;
 134   3                                      
 135   3                              
 136   3                              //非全速加热时显示一些非必要数据
 137   3                              if((2500-PWMVAL)>1000)
 138   3                              {
 139   4      //                              //计算当前电源电压并显示
 140   4      //                              powerval = ADC_get_val(1);
 141   4      //                              powerval = (powerval*3300)/4096;
 142   4      //                              powerval = powerval/10000*100;
 143   4      //                              OLED_ShowNum(102,1,powerval*10,3,8);
 144   4      //                              //mpu6050温度传感器温度
 145   4      //                              mpu_temp = MPU_Get_Temperature();
 146   4      //                              OLED_ShowNum(102,2,mpu_temp,3,8);
 147   4                                      //显示静置时长
 148   4                                      OLED_ShowNum(102,2,mpu_time/PWMHZ,3,8);
 149   4                              }
 150   3      
 151   3                              //根据设定的温度获取T12热电偶电压值（adc值）
 152   3                              adc_want = temp2adcval(temp_want);
 153   3      
 154   3                              //adc滤波数组去掉最大最小值，求均值
 155   3                              t12adc_max=t12adc_val[0];
 156   3                              t12adc_min=t12adc_val[0];
 157   3                              t12adc_all = 0;
 158   3                              for(i=0;i<ADCARRAYNUM;i++)
 159   3                              {
 160   4                                      if(t12adc_val[i]<t12adc_min)
 161   4                                              t12adc_min = t12adc_val[i];
 162   4                                      if(t12adc_val[i]>t12adc_max)
 163   4                                              t12adc_max = t12adc_val[i];
 164   4                                      t12adc_all += t12adc_val[i];
 165   4                              }
 166   3                              t12adc_average = (t12adc_all-t12adc_max-t12adc_min)/(ADCARRAYNUM-2);
 167   3                              //PID控制PWM加热占空比
 168   3                              PWMVAL = get_pwmval_with_pid(t12adc_average,adc_want,2500);
 169   3                              //显示当前温度
 170   3                              OLED_ShowNum(32,0,adc2tempval(t12adc_average),3,16);
 171   3                              //adc
 172   3                              //OLED_ShowNum(32,0,t12adc_average,4,16);
 173   3      
 174   3                              //计算运算放大器输出电压 && 填充数组
 175   3                              t12adc_val[t12adc_i] = ADC_get_val(0);
 176   3                              t12adc_val[t12adc_i] = (t12adc_val[t12adc_i]*3300)/4096;
 177   3                              t12adc_i++;
C51 COMPILER V9.60.7.0   MAIN                                                              04/16/2024 22:55:50 PAGE 4   

 178   3                              if(t12adc_i==ADCARRAYNUM)
 179   3                                      t12adc_i = 0;
 180   3                              
 181   3                              //按键检测
 182   3                              if(KEY1_DOWN&&KEY2_DOWN)  //同时按下
 183   3                              {
 184   4                                      KEY1_DOWN = 0;
 185   4                                      KEY2_DOWN = 0;
 186   4                                      
 187   4                              }
 188   3                              if(KEY1_DOWN)   //KEY1按下
 189   3                              {
 190   4                                      temp_want+=KEY1_DOWN;
 191   4                                      if(temp_want>450)
 192   4                                              temp_want = 450;
 193   4                                      temp_set = temp_want;
 194   4                                      OLED_ShowNum(102,0,temp_want,3,8);
 195   4                                      KEY1_DOWN = 0;
 196   4                              }
 197   3                              if(KEY2_DOWN)  //KEY2按下
 198   3                              {
 199   4                                      temp_want-=KEY2_DOWN;
 200   4                                      if(temp_want<0)
 201   4                                              temp_want = 0;
 202   4                                      temp_set = temp_want;
 203   4                                      OLED_ShowNum(102,0,temp_want,3,8);
 204   4                                      KEY2_DOWN = 0;
 205   4                              }
 206   3                      }
 207   2              }
 208   1      }
*** WARNING C280 IN LINE 59 OF main.c: 'mpu_temp': unreferenced local variable
 209          #else
              //硬件测试
              int main()
              {
                      u8 flag=0,ret;
                      s16 mpu_data,mpu_temp;
                      float powerval;
                      
                      gpio_init();
                      OLED_Init();
                      ADC_init();
                      Timer0_Init();
                      ret = InitMPU6050();
                      OLED_ShowNum(10,2,ret,3,8);
                      
                      EA = 1;
                      SWITCH = 0;
                      
                      while(1)
                      {
                              mpu_data = GetData(MPU_GYRO_YOUTH_REG);
                              mpu_temp = MPU_Get_Temperature();
              
                              if(mpu_data<0)
                              {
                                      mpu_data = -mpu_data;
                                      OLED_ShowString(0,0,"-",8);
                              }
                              else
                              {
C51 COMPILER V9.60.7.0   MAIN                                                              04/16/2024 22:55:50 PAGE 5   

                                      OLED_ShowString(0,0,"+",8);
                              }
                                      
                              OLED_ShowNum(10,0,mpu_data,5,8);
                              OLED_ShowNum(72,0,mpu_temp,4,8);
                              
                              
                              //计算当前电源电压并显示
                              powerval = ADC_get_val(1);
                              powerval = (powerval*3300)/4096;
                              powerval = powerval/10000*100;
                              OLED_ShowNum(10,1,powerval*10,3,8);
                              
                              if(flag==1)
                              {
                                      SWITCH = 1;
                                      LED = 0;
                                      flag = 0;
                              }
                              else
                              {
                                      SWITCH = 0;
                                      LED = 1;
                                      flag = 1;
                              }
                              
                              delay_ms(60);
                      }
              }
              #endif
 269          
 270          
 271          void gpio_init(void)
 272          {
 273   1              P_SW2 |= 0x80;     //使能访问 XFR
 274   1              
 275   1              P3M0 |= (3<<5);    //设置 P3.5  P3.6为推挽模式   LED & SWITCH
 276   1              P3M1 &= ~(3<<5);
 277   1              
 278   1              P1M0 |= (3<<4);    //设置 P1.4  P1.5为开漏模式   IIC 带上拉电阻
 279   1              P1M1 |= (3<<4);
 280   1              
 281   1              P1M0 &= ~(3<<0);   //设置 P1.0  P1.1为高阻输入   ADC
 282   1              P1M1 |= (3<<0);
 283   1              
 284   1              P3M0 &= ~(3<<2);    //设置 P3.2  P3.3为准双向模式   KEY
 285   1              P3M1 &= ~(3<<2);
 286   1              
 287   1              KEY1=1;
 288   1              KEY2=1;
 289   1              SCL=1;
 290   1              SDA=1;
 291   1      }
 292          
 293          void ADC_init(void)
 294          {
 295   1              ADCTIM = 0x3f;//设置 ADC 内部时序
 296   1              ADCCFG = 0x0f;//设置 ADC 时钟为系统时钟/2/16
 297   1              ADC_CONTR = 0x80;//使能 ADC 模块
 298   1      }
 299          
 300          
C51 COMPILER V9.60.7.0   MAIN                                                              04/16/2024 22:55:50 PAGE 6   

 301          u16 ADC_get_val(u8 channel)
 302          {
 303   1              ADC_CONTR |= 0x40;        //启动 AD 转换
 304   1              
 305   1              ADC_CONTR &= ~(0xf);
 306   1              ADC_CONTR |= channel;
 307   1              
 308   1              _nop_();
 309   1              _nop_();
 310   1              while (!(ADC_CONTR & 0x20));//查询 ADC 完成标志
 311   1              ADC_CONTR &= ~0x20;         //清完成标志
 312   1              P2 = ADC_RES;               //读取 ADC 结果
 313   1              return (ADC_RES<<4)|(ADC_RESL>>4);
 314   1      }
 315          
 316          
 317          u16 temp2adcval(u16 temperature)
 318          {
 319   1              u8 i=0;
 320   1              
 321   1              for(i=0;i<TEMPMAPNUM-1;i++)
 322   1              {
 323   2                      if(temperature>=temp_map[i].temp&&temperature<temp_map[i+1].temp)
 324   2                      {
 325   3                              return temp_map[i].k*temperature+temp_map[i].b;
 326   3                      }
 327   2              }
 328   1              return temp_map[i].k*temperature+temp_map[i].b;
 329   1      }
 330          
 331          u16 adc2tempval(u16 adcval)
 332          {
 333   1              u8 i=0;
 334   1              
 335   1              for(i=0;i<TEMPMAPNUM-1;i++)
 336   1              {
 337   2                      if(adcval>=temp_map[i].adc&&adcval<temp_map[i+1].adc)
 338   2                      {
 339   3                              return (adcval-temp_map[i].b)/temp_map[i].k;
 340   3                      }
 341   2              }
 342   1              return (adcval-temp_map[i].b)/temp_map[i].k;
 343   1      }
 344          
 345          
 346          #define PVAL  25.0F
 347          #define IVAL  0.82F
 348          #define DVAL  1.20F
 349          #define INTEGRAL 1500
 350          int get_pwmval_with_pid(u16 adcvalt12, u16 adcvalwant, s16 pwmmax)
 351          {
 352   1              static s16  lasterror=0, integralval=0;
 353   1              s16 error,derror, pwmval=0;
 354   1              error = adcvalwant - adcvalt12;
 355   1              integralval += error;
 356   1              if(integralval>INTEGRAL)
 357   1                      integralval = INTEGRAL;
 358   1              if(integralval<-INTEGRAL)
 359   1                      integralval = -INTEGRAL;
 360   1              
 361   1              derror = error - lasterror;
 362   1              pwmval = PVAL*error + IVAL*integralval + DVAL*derror;
C51 COMPILER V9.60.7.0   MAIN                                                              04/16/2024 22:55:50 PAGE 7   

 363   1              lasterror = error;
 364   1              
 365   1              if(pwmval > pwmmax)
 366   1                      pwmval = pwmmax;
 367   1              return pwmval;
 368   1      }
 369          
 370          void Timer0_Isr(void) interrupt 1
 371          {
 372   1              if(KEY1==0){
 373   2                      _K1+=1;
 374   2              }else{
 375   2                      _K1=0;
 376   2              }
 377   1              if(KEY2==0){
 378   2                      _K2+=1;
 379   2              }else{
 380   2                      _K2=0;
 381   2              }
 382   1              if(_K1>80)
 383   1              {
 384   2                      _K1=0;
 385   2                      KEY1_DOWN+=1;
 386   2              }
 387   1              if(_K2>80)
 388   1              {
 389   2                      _K2=0;
 390   2                      KEY2_DOWN+=1;
 391   2              }
 392   1      }
 393          
 394          void Timer0_Init(void)          //1000微秒@40.000MHz
 395          {
 396   1              AUXR |= 0x80;                   //定时器时钟1T模式
 397   1              TMOD &= 0xF0;                   //设置定时器模式
 398   1              TL0 = 0xC0;                             //设置定时初始值
 399   1              TH0 = 0x63;                             //设置定时初始值
 400   1              TF0 = 0;                                //清除TF0标志
 401   1              TR0 = 1;                                //定时器0开始计时
 402   1              ET0 = 1;                                //使能定时器0中断
 403   1      }
 404          
 405          
 406          s16 abs(s16 num)
 407          {
 408   1              if(num<0)
 409   1                      return -num;
 410   1              else
 411   1                      return num;
 412   1      }
 413          
 414          
 415          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2696    ----
   CONSTANT SIZE    =     35    ----
   XDATA SIZE       =    128      77
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.60.7.0   MAIN                                                              04/16/2024 22:55:50 PAGE 8   

   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
