C51 COMPILER V9.60.7.0   MPU6050                                                           05/17/2024 22:10:43 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MPU6050
OBJECT MODULE PLACED IN .\outputs\mpu6050.obj
COMPILER INVOKED BY: D:\keil5\C51\BIN\C51.EXE mpu6050.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND OBJECT(.\outpu
                    -ts\mpu6050.obj)

line level    source

   1          #include "mpu6050.h"
   2          
   3          
   4          //*****************************************************************************************************
   5          //向I2C设备写入一个字节数据
   6          //*****************************************************************************************************
   7          u8 MPU_Write_Byte(u8 REG_Address,u8 REG_data)
   8          {
   9   1          I2C_Start();                  //起始信号
  10   1          I2C_SendByte((MPU_ADDR<<1)|0);   //发送设备地址+写信号
  11   1              I2C_RecvACK();  //等待应答
  12   1          I2C_SendByte(REG_Address);    //内部寄存器地址，
  13   1              I2C_RecvACK();  //等待应答
  14   1          I2C_SendByte(REG_data);       //内部寄存器数据，
  15   1              I2C_RecvACK();  //等待应答
  16   1          I2C_Stop();                   //发送停止信号
  17   1              return 0;
  18   1      }
  19          //*******************************************************************************************************
  20          //从I2C设备读取一个字节数据
  21          //*******************************************************************************************************
  22          u8 MPU_Read_Byte(u8 REG_Address)
  23          {
  24   1              u8 REG_data;
  25   1              I2C_Start();                   //起始信号
  26   1              I2C_SendByte((MPU_ADDR<<1)|0);    //发送设备地址+写信号
  27   1              I2C_RecvACK();  //等待应答
  28   1              I2C_SendByte(REG_Address);     //发送存储单元地址，从0开始      
  29   1              I2C_RecvACK();  //等待应答
  30   1              I2C_Start();                   //起始信号
  31   1              I2C_SendByte((MPU_ADDR<<1)|1);  //发送设备地址+读信号
  32   1              I2C_RecvACK();  //等待应答
  33   1              REG_data=I2C_RecvByte(1);       //读出寄存器数据
  34   1              I2C_Stop();                    //停止信号
  35   1              return REG_data;
  36   1      }
  37          
  38          //设置MPU6050陀螺仪传感器满量程范围
  39          //fsr:0,±250dps;1,±500dps;2,±1000dps;3,±2000dps
  40          //返回值:0,设置成功
  41          //    其他,设置失败 
  42          uint8_t MPU_Set_Gyro_Fsr(uint8_t fsr)
  43          {
  44   1              return MPU_Write_Byte(MPU_GYRO_CFG_REG,fsr<<3);//设置陀螺仪满量程范围  
  45   1      }
  46          //设置MPU6050加速度传感器满量程范围
  47          //fsr:0,±2g;1,±4g;2,±8g;3,±16g
  48          //返回值:0,设置成功
  49          //    其他,设置失败 
  50          uint8_t MPU_Set_Accel_Fsr(uint8_t fsr)
  51          {
  52   1              return MPU_Write_Byte(MPU_ACCEL_CFG_REG,fsr<<3);//设置加速度传感器满量程范围  
  53   1      }
  54          //设置MPU6050的数字低通滤波器
C51 COMPILER V9.60.7.0   MPU6050                                                           05/17/2024 22:10:43 PAGE 2   

  55          //lpf:数字低通滤波频率(Hz)
  56          //返回值:0,设置成功
  57          //    其他,设置失败 
  58          uint8_t MPU_Set_LPF(uint16_t lpf)
  59          {
  60   1              uint8_t dat=0;
  61   1              if(lpf>=188)dat=1;
  62   1              else if(lpf>=98)dat=2;
  63   1              else if(lpf>=42)dat=3;
  64   1              else if(lpf>=20)dat=4;
  65   1              else if(lpf>=10)dat=5;
  66   1              else dat=6; 
  67   1              return MPU_Write_Byte(MPU_CFG_REG,dat);//设置数字低通滤波器  
  68   1      }
  69          //设置MPU6050的采样率(假定Fs=1KHz)
  70          //rate:4~1000(Hz)
  71          //返回值:0,设置成功
  72          //    其他,设置失败 
  73          uint8_t MPU_Set_Rate(uint16_t rate)
  74          {
  75   1              uint8_t dat;
  76   1              if(rate>1000)rate=1000;
  77   1              if(rate<4)rate=4;
  78   1              dat=1000/rate-1;
  79   1              dat=MPU_Write_Byte(MPU_SAMPLE_RATE_REG,dat);    //设置数字低通滤波器
  80   1              return MPU_Set_LPF(rate/2);     //自动设置LPF为采样率的一半
  81   1      }
  82          
  83          
  84          //******************************************************************************************************
  85          //初始化MPU6050
  86          //******************************************************************************************************
  87          u8 InitMPU6050(void)
  88          {
  89   1              u8 res;
  90   1              MPU_Write_Byte(MPU_PWR_MGMT1_REG,0X80); //复位MPU6050
  91   1          delay_ms(100);
  92   1              MPU_Write_Byte(MPU_PWR_MGMT1_REG,0X00); //唤醒MPU6050 
  93   1              MPU_Set_Gyro_Fsr(3);                                    //陀螺仪传感器,±2000dps
  94   1              MPU_Set_Accel_Fsr(0);                                   //加速度传感器,±2g
  95   1              MPU_Set_Rate(50);                                               //设置采样率50Hz
  96   1              MPU_Write_Byte(MPU_INT_EN_REG,0X00);    //关闭所有中断
  97   1              MPU_Write_Byte(MPU_USER_CTRL_REG,0X00); //I2C主模式关闭
  98   1              MPU_Write_Byte(MPU_FIFO_EN_REG,0XFF);   //FIFO全开
  99   1              MPU_Write_Byte(MPU_INTBP_CFG_REG,0X80); //INT引脚低电平有效
 100   1              res=MPU_Read_Byte(MPU_DEVICE_ID_REG);
 101   1              if(res==MPU_ADDR)//器件ID正确
 102   1              {
 103   2                      MPU_Write_Byte(MPU_PWR_MGMT1_REG,0X01); //设置CLKSEL,PLL X轴为参考
 104   2                      MPU_Write_Byte(MPU_PWR_MGMT2_REG,0X00); //加速度与陀螺仪都工作
 105   2                      MPU_Set_Rate(200);                                              //设置采样率为200Hz
 106   2              }else return 1;
 107   1              return 0;
 108   1      }
 109          //******************************************************************************************************
 110          //合成数据
 111          //******************************************************************************************************
 112          s16 GetData(u8 REG_Address)
 113          {
 114   1              u8 H,L;
 115   1              H=MPU_Read_Byte(REG_Address);
 116   1              L=MPU_Read_Byte(REG_Address+1);
C51 COMPILER V9.60.7.0   MPU6050                                                           05/17/2024 22:10:43 PAGE 3   

 117   1              return ((H<<8)+L);   //合成数据
 118   1      }
 119          
 120          
 121          //返回值:温度值整数部分
 122          float MPU_Get_Temperature(void)
 123          {
 124   1          s16 raw;
 125   1              float temp;
 126   1              u8 H,L;
 127   1              
 128   1              H=MPU_Read_Byte(MPU_TEMP_OUTH_REG);
 129   1              L=MPU_Read_Byte(MPU_TEMP_OUTH_REG+1);
 130   1          raw=(H<<8)+L;
 131   1          temp=36.53+raw/340.0f;
 132   1          return temp;
 133   1      }
 134          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    491    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      10
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
